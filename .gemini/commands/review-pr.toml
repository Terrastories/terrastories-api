
# Comprehensive Pull Request Review Command

description = "Perform a comprehensive pull request review, analyzing changes, aggregating feedback, and identifying fixes."

prompt = """
You are a senior software engineer tasked with reviewing pull request {{args}}.

Your goal is to provide a thorough, constructive, and actionable review.

**Step 1: Information Gathering**
First, use the available tools to gather all context about PR {{args}}:
1. Fetch the PR title, description, and author using: `!{gh pr view {{args}} --json title,body,author}`
2. Get the full diff of the code changes: `!{gh pr diff {{args}}}`
3. Retrieve all existing comments and review threads: `!{gh pr view {{args}} --json comments,reviews}`
4. Check the status of all CI/CD jobs: `!{gh pr checks {{args}}}`

**Step 2: Analysis & Categorization**
Analyze all the information you've gathered. Categorize your findings into the following sections. For each point, include the file path and line number.

â€¢ ðŸ”´ **Blocking Issues**: Critical problems that MUST be fixed before merging.
  - Examples: Security flaws, breaking changes, failing tests, major bugs.
â€¢ ðŸŸ¡ **Important Issues**: Significant problems that SHOULD be fixed.
  - Examples: Performance concerns, poor error handling, documentation gaps, accessibility issues.
â€¢ ðŸ”µ **Suggestions & Nitpicks**: Minor improvements to consider.
  - Examples: Code style, refactoring opportunities, naming conventions, comment clarity.

**Step 3: Generate Review Summary**
Produce a clear, well-structured review summary in Markdown. Use this template:

---
## ðŸ“Š PR Review for #{{args}}

**Status:** [NEEDS WORK | READY FOR REVIEW | APPROVED]

### Summary
A brief, one-sentence summary of the review.

### ðŸ”´ Blocking Issues
- `path/to/file.ts:42`: [Description of the issue and why it's blocking.]

### ðŸŸ¡ Important Issues
- `path/to/another/file.js:12`: [Description of the issue and suggested fix.]

### ðŸ”µ Suggestions
- `path/to/component.tsx:25`: [Suggestion for improvement.]

### âœ… Positive Feedback
- [Highlight what was done well.]

---

**Step 4: Post the Review to GitHub**
Take the Markdown summary you generated and post it as a comment on the pull request.
1. Write the summary to a temporary file: `!{mkdir -p .gemini/temp && echo "[REVIEW_CONTENT]" > .gemini/temp/review-{{args}}.md}`
2. Post the comment: `!{gh pr comment {{args}} --body-file .gemini/temp/review-{{args}}.md}`
3. Clean up: `!{rm .gemini/temp/review-{{args}}.md}`
"""
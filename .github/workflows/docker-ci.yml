name: Docker CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # DOCKER BUILD & SECURITY TESTING
  # =============================================================================
  docker-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [development, production]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ matrix.target }}-latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ matrix.target }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Test Docker image
        run: |
          # Build image for testing
          docker build --target ${{ matrix.target }} -t test-image:${{ matrix.target }} .

          # Test image can start
          if [ "${{ matrix.target }}" == "development" ]; then
            # Development image should have dev dependencies
            docker run --rm test-image:${{ matrix.target }} npm list --depth=0 | grep -E "(typescript|eslint|vitest)"
          else
            # Production image should not have dev dependencies and should start correctly
            docker run --rm --name test-container -d test-image:${{ matrix.target }}
            sleep 5
            docker logs test-container
            docker stop test-container || true
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: test-image:${{ matrix.target }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.target }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.target }}.sarif'

  # =============================================================================
  # DOCKER COMPOSE TESTING - Test all environment configurations
  # =============================================================================
  docker-compose-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compose-file:
          - docker-compose.yml
          - docker-compose.dev.yml
          - docker-compose.prod.yml
          - docker-compose.field-kit.yml

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          NODE_ENV=test
          PORT=3000
          POSTGRES_PASSWORD=test123
          JWT_SECRET=test-jwt-secret-minimum-32-characters-required-for-security-testing
          SESSION_SECRET=test-session-secret-minimum-32-characters-required-for-cookies-testing
          DATABASE_URL_TEST=:memory:
          LOG_LEVEL=error
          UPLOAD_DIR=/app/uploads
          CORS_ORIGIN=http://localhost:3001
          EOF

      - name: Test Docker Compose configuration
        run: |
          # Test configuration syntax
          docker-compose -f ${{ matrix.compose-file }} config > /dev/null
          echo "✅ ${{ matrix.compose-file }} syntax is valid"

      - name: Test service startup (basic)
        if: matrix.compose-file != 'docker-compose.field-kit.yml' # Field kit might need special setup
        run: |
          # Start services
          docker-compose -f ${{ matrix.compose-file }} up -d --build

          # Wait for services to be healthy
          echo "Waiting for services to be ready..."
          timeout=60
          while [ $timeout -gt 0 ]; do
            if docker-compose -f ${{ matrix.compose-file }} ps | grep -q "healthy\|Up"; then
              break
            fi
            sleep 5
            timeout=$((timeout - 5))
          done

          # Check service status
          docker-compose -f ${{ matrix.compose-file }} ps

          # Test API health endpoint (if API service exists)
          if docker-compose -f ${{ matrix.compose-file }} ps | grep -q "api"; then
            # Wait a bit more for API to be ready
            sleep 10
            # Try to reach health endpoint
            if docker-compose -f ${{ matrix.compose-file }} exec -T api wget --spider --tries=3 --timeout=10 http://localhost:3000/health 2>/dev/null; then
              echo "✅ API health check passed"
            else
              echo "⚠️ API health check failed, checking logs:"
              docker-compose -f ${{ matrix.compose-file }} logs api
            fi
          fi

        env:
          NODE_ENV: test
          POSTGRES_PASSWORD: test123

      - name: Test field-kit specific configuration
        if: matrix.compose-file == 'docker-compose.field-kit.yml'
        run: |
          # Field kit has special offline requirements
          echo "Testing field-kit configuration..."
          docker-compose -f ${{ matrix.compose-file }} config

          # Check that field-kit specific environment variables are configured
          if docker-compose -f ${{ matrix.compose-file }} config | grep -q "FIELD_KIT_MODE"; then
            echo "✅ Field kit mode configuration found"
          else
            echo "❌ Field kit mode configuration missing"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f ${{ matrix.compose-file }} down -v || true
          docker system prune -f || true

  # =============================================================================
  # INTEGRATION TESTING - Test complete deployment scenarios
  # =============================================================================
  integration-test:
    runs-on: ubuntu-latest
    needs: [docker-build]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create production test environment
        run: |
          cat > .env.prod << EOF
          NODE_ENV=production
          PORT=3000
          POSTGRES_PASSWORD=prod-test-password-123
          JWT_SECRET=production-jwt-secret-minimum-32-characters-required-for-security
          SESSION_SECRET=production-session-secret-minimum-32-characters-required-for-cookies
          DATABASE_URL=postgresql://terrastories:prod-test-password-123@localhost:5432/terrastories
          LOG_LEVEL=info
          CORS_ORIGIN=https://app.terrastories.org
          OFFLINE_MODE=false
          FIELD_KIT_MODE=false
          EOF

      - name: Start production environment
        run: |
          # Use production compose with environment overrides
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml --env-file .env.prod up -d --build

          # Wait for services to be healthy
          echo "Waiting for production services to be ready..."
          timeout=120
          while [ $timeout -gt 0 ]; do
            if docker-compose ps | grep -q "healthy.*healthy"; then
              echo "✅ All services are healthy"
              break
            fi
            sleep 10
            timeout=$((timeout - 10))
            echo "Still waiting... ($timeout seconds remaining)"
          done

          if [ $timeout -eq 0 ]; then
            echo "❌ Services failed to become healthy"
            docker-compose logs
            exit 1
          fi

      - name: Run integration tests against Docker deployment
        run: |
          # Wait for API to be fully ready
          sleep 15

          # Test basic API endpoints
          echo "Testing health endpoint..."
          curl -f http://localhost:3000/health || (echo "Health check failed"; exit 1)

          echo "Testing API documentation..."
          curl -f http://localhost:3000/documentation || (echo "API docs check failed"; exit 1)

          echo "Testing public API..."
          curl -f http://localhost:3000/api/v1/public/communities || (echo "Public API check failed"; exit 1)

          echo "✅ Basic integration tests passed"

      - name: Test database connectivity
        run: |
          # Test that database is accessible and PostGIS is enabled
          docker-compose exec -T db psql -U terrastories -d terrastories -c "SELECT version();" || (echo "Database connection failed"; exit 1)
          docker-compose exec -T db psql -U terrastories -d terrastories -c "SELECT PostGIS_Version();" || (echo "PostGIS check failed"; exit 1)
          echo "✅ Database and PostGIS connectivity verified"

      - name: Test file uploads
        run: |
          # Create a test file
          echo "test content" > test-upload.txt

          # Test file upload endpoint (this might need authentication setup)
          echo "Testing file upload capability..."
          # Note: This is a basic test - full auth testing would need proper user setup
          curl -f -X POST -F "file=@test-upload.txt" http://localhost:3000/api/v1/files || echo "⚠️ File upload test requires authentication setup"

          rm test-upload.txt

      - name: Cleanup integration environment
        if: always()
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml down -v
          docker system prune -f

  # =============================================================================
  # FIELD KIT DEPLOYMENT TESTING - Test offline-capable deployment
  # =============================================================================
  field-kit-test:
    runs-on: ubuntu-latest
    needs: [docker-build]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create field-kit test environment
        run: |
          cat > .env.field-kit << EOF
          NODE_ENV=production
          PORT=3000
          POSTGRES_PASSWORD=field-kit-test-123
          JWT_SECRET=field-kit-jwt-secret-minimum-32-characters-required-for-security
          SESSION_SECRET=field-kit-session-secret-minimum-32-characters-required-for-cookies
          DATABASE_URL=postgresql://terrastories:field-kit-test-123@localhost:5432/terrastories
          LOG_LEVEL=info
          OFFLINE_MODE=true
          FIELD_KIT_MODE=true
          SYNC_ENDPOINT=
          TILE_SERVER_URL=http://localhost:8080
          EOF

      - name: Start field-kit environment
        run: |
          docker-compose -f docker-compose.field-kit.yml --env-file .env.field-kit up -d --build

          # Wait for field-kit services
          echo "Waiting for field-kit services to be ready..."
          timeout=120
          while [ $timeout -gt 0 ]; do
            if docker-compose -f docker-compose.field-kit.yml ps | grep -q "Up"; then
              break
            fi
            sleep 10
            timeout=$((timeout - 10))
          done

      - name: Test field-kit specific functionality
        run: |
          # Test offline mode indicators
          echo "Testing field-kit offline capabilities..."

          # API should be accessible
          curl -f http://localhost:3000/health || (echo "Field-kit health check failed"; exit 1)

          # Tile server should be running
          curl -f http://localhost:8080/health || (echo "Tile server health check failed"; exit 1)

          # Test that sync endpoints are disabled in field-kit mode
          # This would be application-specific logic
          echo "✅ Field-kit deployment test completed"

      - name: Cleanup field-kit environment
        if: always()
        run: |
          docker-compose -f docker-compose.field-kit.yml down -v
          docker system prune -f

  # =============================================================================
  # PERFORMANCE & STRESS TESTING
  # =============================================================================
  performance-test:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start performance test environment
        run: |
          docker-compose -f docker-compose.prod.yml up -d --build

          # Wait for services
          timeout=90
          while [ $timeout -gt 0 ]; do
            if curl -f http://localhost:3000/health 2>/dev/null; then
              break
            fi
            sleep 5
            timeout=$((timeout - 5))
          done

      - name: Install Apache Bench
        run: sudo apt-get update && sudo apt-get install -y apache2-utils

      - name: Run performance tests
        run: |
          echo "Running basic performance tests..."

          # Test health endpoint performance
          ab -n 100 -c 10 http://localhost:3000/health

          # Test public API performance
          ab -n 50 -c 5 http://localhost:3000/api/v1/public/communities

          echo "✅ Performance tests completed"

      - name: Check resource usage
        run: |
          echo "=== Docker container resource usage ==="
          docker stats --no-stream
          echo "=== System resource usage ==="
          free -h
          df -h

      - name: Cleanup performance environment
        if: always()
        run: |
          docker-compose -f docker-compose.prod.yml down -v
          docker system prune -f
